/* Auto-generated by genmsg_cpp for file /home/ivan/ros/iri-ros-pkg/iri_wam/iri_wam_arm_navigation/srv/PosePath.srv */
#ifndef IRI_WAM_ARM_NAVIGATION_SERVICE_POSEPATH_H
#define IRI_WAM_ARM_NAVIGATION_SERVICE_POSEPATH_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "geometry_msgs/PoseStamped.h"


#include "geometry_msgs/PoseStamped.h"

namespace iri_wam_arm_navigation
{
template <class ContainerAllocator>
struct PosePathRequest_ {
  typedef PosePathRequest_<ContainerAllocator> Type;

  PosePathRequest_()
  : pose_stamped()
  {
  }

  PosePathRequest_(const ContainerAllocator& _alloc)
  : pose_stamped(_alloc)
  {
  }

  typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _pose_stamped_type;
   ::geometry_msgs::PoseStamped_<ContainerAllocator>  pose_stamped;


private:
  static const char* __s_getDataType_() { return "iri_wam_arm_navigation/PosePathRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "a6cf8bca3220fd47abb2c1783444110d"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "25e4237af36cc7f99ce17ab2eca624a4"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "geometry_msgs/PoseStamped pose_stamped\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, pose_stamped);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, pose_stamped);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(pose_stamped);
    return size;
  }

  typedef boost::shared_ptr< ::iri_wam_arm_navigation::PosePathRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iri_wam_arm_navigation::PosePathRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PosePathRequest
typedef  ::iri_wam_arm_navigation::PosePathRequest_<std::allocator<void> > PosePathRequest;

typedef boost::shared_ptr< ::iri_wam_arm_navigation::PosePathRequest> PosePathRequestPtr;
typedef boost::shared_ptr< ::iri_wam_arm_navigation::PosePathRequest const> PosePathRequestConstPtr;


template <class ContainerAllocator>
struct PosePathResponse_ {
  typedef PosePathResponse_<ContainerAllocator> Type;

  PosePathResponse_()
  : pose_stamped()
  {
  }

  PosePathResponse_(const ContainerAllocator& _alloc)
  : pose_stamped(_alloc)
  {
  }

  typedef std::vector< ::geometry_msgs::PoseStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::other >  _pose_stamped_type;
  std::vector< ::geometry_msgs::PoseStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::other >  pose_stamped;


  ROS_DEPRECATED uint32_t get_pose_stamped_size() const { return (uint32_t)pose_stamped.size(); }
  ROS_DEPRECATED void set_pose_stamped_size(uint32_t size) { pose_stamped.resize((size_t)size); }
  ROS_DEPRECATED void get_pose_stamped_vec(std::vector< ::geometry_msgs::PoseStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::other > & vec) const { vec = this->pose_stamped; }
  ROS_DEPRECATED void set_pose_stamped_vec(const std::vector< ::geometry_msgs::PoseStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::other > & vec) { this->pose_stamped = vec; }
private:
  static const char* __s_getDataType_() { return "iri_wam_arm_navigation/PosePathResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "a6cf8bca3220fd47abb2c1783444110d"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "25e4237af36cc7f99ce17ab2eca624a4"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "geometry_msgs/PoseStamped[] pose_stamped\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, pose_stamped);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, pose_stamped);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(pose_stamped);
    return size;
  }

  typedef boost::shared_ptr< ::iri_wam_arm_navigation::PosePathResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iri_wam_arm_navigation::PosePathResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PosePathResponse
typedef  ::iri_wam_arm_navigation::PosePathResponse_<std::allocator<void> > PosePathResponse;

typedef boost::shared_ptr< ::iri_wam_arm_navigation::PosePathResponse> PosePathResponsePtr;
typedef boost::shared_ptr< ::iri_wam_arm_navigation::PosePathResponse const> PosePathResponseConstPtr;

struct PosePath
{

typedef PosePathRequest Request;
typedef PosePathResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct PosePath
} // namespace iri_wam_arm_navigation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::iri_wam_arm_navigation::PosePathRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::iri_wam_arm_navigation::PosePathRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::iri_wam_arm_navigation::PosePathRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a6cf8bca3220fd47abb2c1783444110d";
  }

  static const char* value(const  ::iri_wam_arm_navigation::PosePathRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa6cf8bca3220fd47ULL;
  static const uint64_t static_value2 = 0xabb2c1783444110dULL;
};

template<class ContainerAllocator>
struct DataType< ::iri_wam_arm_navigation::PosePathRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_wam_arm_navigation/PosePathRequest";
  }

  static const char* value(const  ::iri_wam_arm_navigation::PosePathRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::iri_wam_arm_navigation::PosePathRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/PoseStamped pose_stamped\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::iri_wam_arm_navigation::PosePathRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::iri_wam_arm_navigation::PosePathResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::iri_wam_arm_navigation::PosePathResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::iri_wam_arm_navigation::PosePathResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a6cf8bca3220fd47abb2c1783444110d";
  }

  static const char* value(const  ::iri_wam_arm_navigation::PosePathResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa6cf8bca3220fd47ULL;
  static const uint64_t static_value2 = 0xabb2c1783444110dULL;
};

template<class ContainerAllocator>
struct DataType< ::iri_wam_arm_navigation::PosePathResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_wam_arm_navigation/PosePathResponse";
  }

  static const char* value(const  ::iri_wam_arm_navigation::PosePathResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::iri_wam_arm_navigation::PosePathResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/PoseStamped[] pose_stamped\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::iri_wam_arm_navigation::PosePathResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::iri_wam_arm_navigation::PosePathRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pose_stamped);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PosePathRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::iri_wam_arm_navigation::PosePathResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pose_stamped);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PosePathResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<iri_wam_arm_navigation::PosePath> {
  static const char* value() 
  {
    return "25e4237af36cc7f99ce17ab2eca624a4";
  }

  static const char* value(const iri_wam_arm_navigation::PosePath&) { return value(); } 
};

template<>
struct DataType<iri_wam_arm_navigation::PosePath> {
  static const char* value() 
  {
    return "iri_wam_arm_navigation/PosePath";
  }

  static const char* value(const iri_wam_arm_navigation::PosePath&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<iri_wam_arm_navigation::PosePathRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "25e4237af36cc7f99ce17ab2eca624a4";
  }

  static const char* value(const iri_wam_arm_navigation::PosePathRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<iri_wam_arm_navigation::PosePathRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_wam_arm_navigation/PosePath";
  }

  static const char* value(const iri_wam_arm_navigation::PosePathRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<iri_wam_arm_navigation::PosePathResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "25e4237af36cc7f99ce17ab2eca624a4";
  }

  static const char* value(const iri_wam_arm_navigation::PosePathResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<iri_wam_arm_navigation::PosePathResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "iri_wam_arm_navigation/PosePath";
  }

  static const char* value(const iri_wam_arm_navigation::PosePathResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // IRI_WAM_ARM_NAVIGATION_SERVICE_POSEPATH_H

