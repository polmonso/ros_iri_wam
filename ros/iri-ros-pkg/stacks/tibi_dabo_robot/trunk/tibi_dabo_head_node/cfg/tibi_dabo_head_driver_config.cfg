#! /usr/bin/env python
#*  All rights reserved.
#*
#*  Redistribution and use in source and binary forms, with or without
#*  modification, are permitted provided that the following conditions
#*  are met:
#*
#*   * Redistributions of source code must retain the above copyright
#*     notice, this list of conditions and the following disclaimer.
#*   * Redistributions in binary form must reproduce the above
#*     copyright notice, this list of conditions and the following
#*     disclaimer in the documentation and/or other materials provided
#*     with the distribution.
#*   * Neither the name of the Willow Garage nor the names of its
#*     contributors may be used to endorse or promote products derived
#*     from this software without specific prior written permission.
#*
#*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#*  POSSIBILITY OF SUCH DAMAGE.
#***********************************************************

# Author: 

PACKAGE='tibi_dabo_head_node'
import roslib; roslib.load_manifest(PACKAGE)

from driver_base.msg import SensorLevels
from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

enum_motion_mode = gen.enum([
gen.const("absolute_motion",int_t, 0, "absolute motion"),
gen.const("relative_motion",int_t, 1, "realtive motion")
], "Possible motion modes")

enum_control_mode = gen.enum([
gen.const("position_control",int_t, 0, "position control"),
gen.const("velocity_control",int_t, 1, "velocity control")
], "Possible control modes")
#enum_facial_expression = gen.enum([ 
#gen.const("stand_by", int_t, 0, "default facial expression"),
#gen.const("happy",  int_t, 1, "happy expression"),
#gen.const("sad", int_t, 2, "sad expression"),
#gen.const("angry", int_t, 3, "angry expression"),
#gen.const("confused", int_t, 4, "confused expression"),
#gen.const("shy", int_t, 5, "shy expression"),
#gen.const("ashamed", int_t, 6, "ashamed expression"),
#gen.const("speak", int_t, 7, "speak expression")
#], "Possible facial expressions.")

#       Name                       Type       Reconfiguration level            Description                       Default   Min   Max
gen.add("config_file",  str_t,  SensorLevels.RECONFIGURE_CLOSE,   "XML configuration file",  "head_config.xml")
gen.add("motion_mode",  int_t,  SensorLevels.RECONFIGURE_RUNNING,   "Joint motion mode",  0, 0, 1, edit_method=enum_motion_mode)
gen.add("control_mode",  int_t,  SensorLevels.RECONFIGURE_RUNNING,   "Joint control mode",  0, 0, 1, edit_method=enum_control_mode)
gen.add("feedback_rate",  int_t,  SensorLevels.RECONFIGURE_RUNNING,   "Joint state feedback rate", 10, 1, 100)


#gen.add("motion_seq_file",  str_t,  SensorLevels.RECONFIGURE_RUNNING,   "XML motion sequence file",  "head_home.xml")
#gen.add("lights_seq_file",  str_t,  SensorLevels.RECONFIGURE_RUNNING,   "XML lights sequence file",  "home.xml")
#gen.add("pan_angle",  double_t,  SensorLevels.RECONFIGURE_RUNNING,   "Desired pan angle",  150 , 0, 300)
#gen.add("pan_speed",  double_t,  SensorLevels.RECONFIGURE_RUNNING,   "Desired pan speed",  150 , 0, 300)
#gen.add("tilt_angle",  double_t,  SensorLevels.RECONFIGURE_RUNNING,   "Desired tilt angle",  150 , 0, 300)
#gen.add("tilt_speed",  double_t,  SensorLevels.RECONFIGURE_RUNNING,   "Desired tilt speed",  150 , 0, 300)
#gen.add("side_angle",  double_t,  SensorLevels.RECONFIGURE_RUNNING,   "Desired side angle",  150 , 0, 300)
#gen.add("side_speed",  double_t,  SensorLevels.RECONFIGURE_RUNNING,   "Desired side speed",  150 , 0, 300)
#gen.add("facial_expression", int_t,SensorLevels.RECONFIGURE_RUNNING, "Desired facial expression", 0,0,7, edit_method=enum_facial_expression)
#gen.add("brightness",  double_t,  SensorLevels.RECONFIGURE_RUNNING,   "Led brightness",  50 , 0, 100)


exit(gen.generate(PACKAGE, "TibiDaboHeadDriver", "TibiDaboHead"))
