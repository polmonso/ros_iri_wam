<launch>
<!-- This is the demo presented at phenosym11 - julich - September 2011 -->

<!-- To save an image open a terminal and call the service using
> rosservice call /tof_color/saveImage
-->

    <!-- Publish Forward and Inverse Kinematics -->
    <remap from="/wam_fk/tf" to="/tf"/>
    <remap from="/wam_fk/joint_states" to="/wam_driver_node/joint_states"/>
    <node name="wam_fk" pkg="wam_fk" type="wam_fk" />
    <remap from="/wam_ik/joint_states" to="/wam_driver_node/joint_states"/>
    <remap from="/wam_ik/joint_move" to="/wam_driver_node/joints_move"/>
    <node name="wam_ik" pkg="wam_ik" type="wam_ik" />
<!--
    <remap from="/wam_test/pose" to="/wam_driver_node/pose"/>
    <remap from="/wam_test/joint_states" to="/wam_driver_node/joint_states"/>
    <remap from="/wam_test/pose_move" to="/wam_ik/pose_move"/>
    <remap from="/wam_test/pose_move2" to="/wam_ik/pose_move"/>
    <remap from="/wam_test/joints_move" to="/wam_driver_node/joints_move"/>
    <remap from="/wam_test/tf" to="/tf"/>
    <node name="wam_test" pkg="wam_test" type="wam_test" />
-->

     <!-- Starts PMD Camboard camera node -->
     <node name="camboard_camera" pkg="iri_pmdcamera" type="iri_pmdcamera" output="screen" respawn="true">
     <param name="camera_type" value="1" />
     </node>

     <!-- Starts Color Firewire camera node ->
     <node name="iri_firewire_camera" pkg="iri_firewire_camera" type="firewire_camera_node" output="screen">
     <param name="Camera_node" value="0" />
     <param name="Framerate" value="30" />
     <param name="Color_coding" value="3" />
     </node>
     -->
     <node pkg="camera1394" type="camera1394_node" name="camera1394_node" >
     <param name="video_mode" value="640x480_rgb8" />
     </node>      

<!-- Rectificar l'imatge de color. Cal el fitxer de calibratge! 
       <node name="image_proc" pkg="image_proc" type="image_proc" output="screen" ns="/firewire_camera_node">
       <remap from="/firewire_camera_node/image_raw" to="/firewire_camera_node/camera_image" /> 
       </node>
-->

     <!-- Filter jump edge points -->
     <node name="pcl_je_filter" pkg="iri_pcl_filters" type="pcl_je_filter" output="screen">
     <remap from="input" to="/camboard_camera/pointcloud/cloud2_raw" /> 
     </node>

     <!-- Average points ->
     <node name="average_point_cloud_node" pkg="average_point_cloud_node" type="average_point_cloud_node" output="screen">
<!-       <remap from="input" to="/pmdcamera_driver_node/pointcloud/cloud2_raw" /> ->
     <remap from="/average_point_cloud_node/input" to="/jump_edge/pcl2_jef" /> 
     </node>
-->

     <!-- merge tof and rgb -->
     <node name="tof_color" pkg="zyonz_tof_color" type="zyonz_tof_color" output="screen">
<!--     <remap from="/image" to="/firewire_camera_node/camera_image" /> -->
     <remap from="/image" to="/camera/image_raw" /> 
     <remap from="/input_intens" to="/camboard_camera/image_inten" /> 
<!--     <remap from="/pointCloud" to="/camboard_camera/pointcloud/cloud2_raw" /> -->
    <remap from="/pointCloud" to="/jump_edge/pcl2_jef" /> 
<!--     <remap from="/pointCloud" to="/average_point_cloud_node/output" /> -->
     </node>
    
    <!-- Add homogeneous transformation to pointCloud -->
    <node name="camboard_tf" pkg="zyonz_wam_tf" type="zyonz_camboard_tf_publisher" />    

    <!-- Starts RVIZ -->
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find zyonz_tof_color)/launch/demo_probing.vcg" output="screen" />

</launch>
