"""autogenerated by genmsg_py from ndesc_pc.msg. Do not edit."""
import roslib.message
import struct

import geometry_msgs.msg
import normal_descriptor_node.msg

class ndesc_pc(roslib.message.Message):
  _md5sum = "59002eb7a795b50409ec83c444fc2d1a"
  _type = "normal_descriptor_node/ndesc_pc"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 num
int32 len
int32 width
int32 height
normal_descriptor_node/ndesc[] descriptors
================================================================================
MSG: normal_descriptor_node/ndesc
float32[] descriptor
geometry_msgs/Vector3 point3d
int32 u
int32 v
================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['num','len','width','height','descriptors']
  _slot_types = ['int32','int32','int32','int32','normal_descriptor_node/ndesc[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       num,len,width,height,descriptors
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(ndesc_pc, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.num is None:
        self.num = 0
      if self.len is None:
        self.len = 0
      if self.width is None:
        self.width = 0
      if self.height is None:
        self.height = 0
      if self.descriptors is None:
        self.descriptors = []
    else:
      self.num = 0
      self.len = 0
      self.width = 0
      self.height = 0
      self.descriptors = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_4i.pack(_x.num, _x.len, _x.width, _x.height))
      length = len(self.descriptors)
      buff.write(_struct_I.pack(length))
      for val1 in self.descriptors:
        length = len(val1.descriptor)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.descriptor))
        _v1 = val1.point3d
        _x = _v1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_2i.pack(_x.u, _x.v))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.num, _x.len, _x.width, _x.height,) = _struct_4i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.descriptors = []
      for i in xrange(0, length):
        val1 = normal_descriptor_node.msg.ndesc()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.descriptor = struct.unpack(pattern, str[start:end])
        _v2 = val1.point3d
        _x = _v2
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.u, _x.v,) = _struct_2i.unpack(str[start:end])
        self.descriptors.append(val1)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_4i.pack(_x.num, _x.len, _x.width, _x.height))
      length = len(self.descriptors)
      buff.write(_struct_I.pack(length))
      for val1 in self.descriptors:
        length = len(val1.descriptor)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.descriptor.tostring())
        _v3 = val1.point3d
        _x = _v3
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_2i.pack(_x.u, _x.v))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.num, _x.len, _x.width, _x.height,) = _struct_4i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.descriptors = []
      for i in xrange(0, length):
        val1 = normal_descriptor_node.msg.ndesc()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.descriptor = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _v4 = val1.point3d
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.u, _x.v,) = _struct_2i.unpack(str[start:end])
        self.descriptors.append(val1)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_3d = struct.Struct("<3d")
_struct_2i = struct.Struct("<2i")
_struct_4i = struct.Struct("<4i")
