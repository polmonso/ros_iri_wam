#! /usr/bin/env python
#*  All rights reserved.
#*
#*  Redistribution and use in source and binary forms, with or without
#*  modification, are permitted provided that the following conditions
#*  are met:
#*
#*   * Redistributions of source code must retain the above copyright
#*     notice, this list of conditions and the following disclaimer.
#*   * Redistributions in binary form must reproduce the above
#*     copyright notice, this list of conditions and the following
#*     disclaimer in the documentation and/or other materials provided
#*     with the distribution.
#*   * Neither the name of the Willow Garage nor the names of its
#*     contributors may be used to endorse or promote products derived
#*     from this software without specific prior written permission.
#*
#*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#*  POSSIBILITY OF SUCH DAMAGE.
#***********************************************************

# Author: 

PACKAGE='iri_firewire_camera'
import roslib; roslib.load_manifest(PACKAGE)

from driver_base.msg import SensorLevels
from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

enum_mode = gen.enum([ gen.const("Auto", int_t, 0, "Auto mode"),
gen.const("Manual", int_t, 1, "Manual mode")],"Available feature modes")

enum_color_coding = gen.enum([ gen.const("MONO8", int_t, 0, "Mono coding with 8 bits per pixel"),
gen.const("YUV8", int_t, 1, "YUV coding with 4,2,2 pixels per channel"),
gen.const("YUV16", int_t, 2, "YUV coding with 4,4,4 pixels per channel"),
gen.const("RGB24", int_t, 3, "RGB coding with 8 bits per channel"),
gen.const("MONO16", int_t, 4, "MONO coding with 16 bits per pixel"),
gen.const("RGB48", int_t, 5, "RGB coding with 16 bits per channel"),
gen.const("RAW8", int_t, 6, "RAW coding with 8 bits per pixel"),
gen.const("RAW16", int_t, 7, "RAW coding with 16 bits per pixel")],"Available color modes")

#       Name                       Type       Reconfiguration level            Description                       Default   Min   Max
gen.add("Camera_node",             int_t,     SensorLevels.RECONFIGURE_STOP,   "Desired camera id",              -1,       -1 ,  100)
gen.add("ISO_speed",               int_t,     SensorLevels.RECONFIGURE_STOP,   "Desired ISO speed",              800,      100,  800)
gen.add("Image_width",             int_t,     SensorLevels.RECONFIGURE_STOP,   "Desired image width in pixels",  640,      160 , 2448)
gen.add("Image_height",            int_t,     SensorLevels.RECONFIGURE_STOP,   "Desired image height in pixels", 480,      120 , 2048)
gen.add("Left_offset",             int_t,     SensorLevels.RECONFIGURE_STOP,   "Desired left offset in pixels",  0,        0,    2448)
gen.add("Top_offset",              int_t,     SensorLevels.RECONFIGURE_STOP,   "Desired top offset in pixels",   0,        0,    2048)
gen.add("Framerate",               double_t,  SensorLevels.RECONFIGURE_STOP,   "Desired framerate in frames per second", 50,1.875 ,200)
gen.add("Color_coding",            int_t,     SensorLevels.RECONFIGURE_STOP,   "Desired color coding",           0,        0,    7, edit_method=enum_color_coding)
gen.add("White_balance_enabled",   bool_t,    SensorLevels.RECONFIGURE_STOP,   "Enable white balance feature",   False)
gen.add("White_balance_mode",      int_t,     SensorLevels.RECONFIGURE_STOP,   "White balance mode",             0,        0,    1, edit_method=enum_mode)
gen.add("White_balance_u_b_value", int_t,     SensorLevels.RECONFIGURE_STOP,   "White balance U/B value",        0,        0,    1023)
gen.add("White_balance_v_r_value", int_t,     SensorLevels.RECONFIGURE_STOP,   "White balance V/R value",        0,        0,    1023)
gen.add("Shutter_enabled",         bool_t,    SensorLevels.RECONFIGURE_STOP,   "Enable shutter feature",         False)
gen.add("Shutter_mode",            int_t,     SensorLevels.RECONFIGURE_STOP,   "Shutter mode",                   0,        0,    1, edit_method=enum_mode)
gen.add("Shutter_value",           int_t,     SensorLevels.RECONFIGURE_STOP,   "Shutter value",                  0,        28,   4095)
gen.add("Gain_enabled",            bool_t,    SensorLevels.RECONFIGURE_STOP,   "Enable gain feature",            False)
gen.add("Gain_mode",               int_t,     SensorLevels.RECONFIGURE_STOP,   "Gain mode",                      0,        0,    1, edit_method=enum_mode)
gen.add("Gain_value",              int_t,     SensorLevels.RECONFIGURE_STOP,   "Gain value",                     0,        48,   730)
import roslib; roslib.load_manifest(PACKAGE)

exit(gen.generate(PACKAGE, "FirewireCameraDriver", "FirewireCamera"))
