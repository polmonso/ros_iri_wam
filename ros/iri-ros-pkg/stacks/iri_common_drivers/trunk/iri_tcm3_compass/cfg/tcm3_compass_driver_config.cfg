#! /usr/bin/env python
#*  All rights reserved.
#*
#*  Redistribution and use in source and binary forms, with or without
#*  modification, are permitted provided that the following conditions
#*  are met:
#*
#*   * Redistributions of source code must retain the above copyright
#*     notice, this list of conditions and the following disclaimer.
#*   * Redistributions in binary form must reproduce the above
#*     copyright notice, this list of conditions and the following
#*     disclaimer in the documentation and/or other materials provided
#*     with the distribution.
#*   * Neither the name of the Willow Garage nor the names of its
#*     contributors may be used to endorse or promote products derived
#*     from this software without specific prior written permission.
#*
#*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#*  POSSIBILITY OF SUCH DAMAGE.
#***********************************************************

# Author:

PACKAGE='iri_tcm3_compass'
import roslib; roslib.load_manifest(PACKAGE)

from driver_base.msg import SensorLevels
from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

mounting_positions = gen.enum([
gen.const("STD",      int_t, 1,  "Standard"),
gen.const("Xup",      int_t, 2,  "X axis up"),
gen.const("Yup",      int_t, 3,  "Y axis up"),
gen.const("m90h",    int_t, 4,  "-90 heading offset"),
gen.const("m180h",   int_t, 5,  "-180 heading offset"),
gen.const("m270h",   int_t, 6,  "-270 heading offset"),
gen.const("Zdown",    int_t, 7,  "Z down"),
gen.const("X90",      int_t, 8,  "X + 90"),
gen.const("X180",     int_t, 9,  "X + 180"),
gen.const("X270",     int_t, 10, "X + 270"),
gen.const("Y90",      int_t, 11, "Y + 90"),
gen.const("Y180",     int_t, 12, "Y + 180"),
gen.const("Y270",     int_t, 13, "Y + 270"),
gen.const("Zdown90",  int_t, 14, "Z down + 90"),
gen.const("Zdown180", int_t, 15, "Z down + 180"),
gen.const("Zdown270", int_t, 16, "Z down + 270")],"available mounting positions")

#       Name                  Type    Reconfiguration level          Description       Default   Min   Max       edit_method
gen.add("mounting_position",  int_t,  SensorLevels.RECONFIGURE_STOP, "Mounting Position", 6,      1,  16, edit_method=mounting_positions)
gen.add("relative",  bool_t,  SensorLevels.RECONFIGURE_RUNNING, "Relative data", True)
#gen.add("frequency", double_t, SensorLevels.RECONFIGURE_CLOSE, "acquisition frequency", 10, 0.1, 100)
gen.add("frame_id",  str_t,  SensorLevels.RECONFIGURE_RUNNING, "Frame ID",  "tcm3")




exit(gen.generate(PACKAGE, "Tcm3CompassDriver", "Tcm3Compass"))
