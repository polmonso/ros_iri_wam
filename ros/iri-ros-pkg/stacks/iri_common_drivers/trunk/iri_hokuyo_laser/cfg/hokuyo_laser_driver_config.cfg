#! /usr/bin/env python

#*  All rights reserved.
#*
#*  Redistribution and use in source and binary forms, with or without
#*  modification, are permitted provided that the following conditions
#*  are met:
#*
#*   * Redistributions of source code must retain the above copyright
#*     notice, this list of conditions and the following disclaimer.
#*   * Redistributions in binary form must reproduce the above
#*     copyright notice, this list of conditions and the following
#*     disclaimer in the documentation and/or other materials provided
#*     with the distribution.
#*   * Neither the name of the Willow Garage nor the names of its
#*     contributors may be used to endorse or promote products derived
#*     from this software without specific prior written permission.
#*
#*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#*  POSSIBILITY OF SUCH DAMAGE.
#***********************************************************

# Author: Marti Morta Garriga mmorta@iri.upc.edu

from math import pi

PACKAGE='iri_hokuyo_laser'
import roslib; roslib.load_manifest(PACKAGE)

from driver_base.msg import SensorLevels
from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

enum_mode = gen.enum([ gen.const("Normal",    int_t, 1, ""), gen.const("Intensity", int_t, 2, ""), gen.const("Short",     int_t, 3, "")  ] , "Operation modes.")

#gen.add("Name",Type,Reconfiguration level,"Description",Default,Min,Max)
#  gen.add("operation_mode",int_t,SensorLevels.RECONFIGURE_STOP,"Operation mode",1,1,3,edit_method=enum_operation_mode)

#       Name                       Type       Reconfiguration level            Description                       Default   Min   Max
gen.add("angle_min",      double_t, SensorLevels.RECONFIGURE_STOP,    "The angle of the first range measurement. The unit depends on ~ang_radians.",   -pi/2, -pi/2, 0)
gen.add("angle_max",      double_t, SensorLevels.RECONFIGURE_STOP,    "The angle of the first range measurement. The unit depends on ~ang_radians.",   pi/2,  0,  pi/2)
gen.add("cluster",        int_t,    SensorLevels.RECONFIGURE_STOP,    "The number of adjacent range measurements to cluster into a single reading",    0,         0,    99)
gen.add("interval",       int_t,    SensorLevels.RECONFIGURE_STOP,    "The number of scans to skip between each measured scan",                        0,         0,     9)
gen.add("type",           int_t,    SensorLevels.RECONFIGURE_STOP,    "Short/Normal/Intensity.",                                                       1,         1,     3,edit_method=enum_mode)
gen.add("high_sensivity", bool_t,   SensorLevels.RECONFIGURE_STOP,    "True or False",                                                                               False)
gen.add("use_ethernet",   bool_t,   SensorLevels.RECONFIGURE_CLOSE,   "Sensor Connection",                                                                           False)
gen.add("usb_port",       str_t,    SensorLevels.RECONFIGURE_CLOSE,   "The serial port where the hokuyo device can be found",                               "/dev/ttyACM0")
gen.add("ip_address",     str_t,    SensorLevels.RECONFIGURE_CLOSE,   "The serial port where the hokuyo device can be found",                               "192.168.0.10")
gen.add("frame_id",       str_t,    SensorLevels.RECONFIGURE_RUNNING, "The frame in which laser scans will be returned",                                          "/laser")



exit(gen.generate(PACKAGE, "HokuyoLaserDriver", "HokuyoLaser"))
