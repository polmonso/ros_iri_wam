#! /usr/bin/env python

#*  All rights reserved.
#*
#*  Redistribution and use in source and binary forms, with or without
#*  modification, are permitted provided that the following conditions
#*  are met:
#*
#*   * Redistributions of source code must retain the above copyright
#*     notice, this list of conditions and the following disclaimer.
#*   * Redistributions in binary form must reproduce the above
#*     copyright notice, this list of conditions and the following
#*     disclaimer in the documentation and/or other materials provided
#*     with the distribution.
#*   * Neither the name of the Willow Garage nor the names of its
#*     contributors may be used to endorse or promote products derived
#*     from this software without specific prior written permission.
#*
#*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#*  POSSIBILITY OF SUCH DAMAGE.
#***********************************************************

# Author:

PACKAGE='iri_hokuyo_laser3d'
import roslib; roslib.load_manifest(PACKAGE)

from driver_base.msg import SensorLevels
from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

#       Name            Type      Reconfiguration level            Description                   Def   Min   Max
gen.add("resolution",   double_t, SensorLevels.RECONFIGURE_STOP,"scan resolution dg/scan",     2,    0.05, 2)
gen.add("laser_mode",   int_t,    SensorLevels.RECONFIGURE_STOP,   "ranges or ranges+intensity", 1,    0,    1  )
gen.add("scan_mode",    bool_t,   SensorLevels.RECONFIGURE_STOP,   "scan from the point 0 or just where the laser is", True)
gen.add("continuous",   bool_t,   SensorLevels.RECONFIGURE_STOP,   "publish continuous pointclouds or service one", False)

#gen.add("fi_start",     int_t, SensorLevels.RECONFIGURE_STOP,   "platform angle start",       0,    0,    360)
#gen.add("fi_end",       int_t, SensorLevels.RECONFIGURE_STOP,   "platform angle end",         0,    0,    360)
#gen.add("theeta_start", int_t, SensorLevels.RECONFIGURE_STOP,   "laser angle start",          -135, -135, 0  )
#gen.add("theeta_end",   int_t, SensorLevels.RECONFIGURE_STOP,   "laser angle end",            135,  0,    135)

gen.add("publish_pointcloud",  bool_t,SensorLevels.RECONFIGURE_RUNNING,   "", False)
gen.add("publish_pointcloud2", bool_t,SensorLevels.RECONFIGURE_RUNNING,   "", True)

gen.add("laser_port",   str_t, SensorLevels.RECONFIGURE_CLOSE,  "port of the laser", "/dev/ttyACM0")
gen.add("frame_id",     str_t, SensorLevels.RECONFIGURE_RUNNING,"The frame in which laser scans will be returned", "h3d")

exit(gen.generate(PACKAGE, "HokuyoLaser3dDriver", "HokuyoLaser3d"))
